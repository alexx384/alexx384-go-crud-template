// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"crud/internal/model"

	mock "github.com/stretchr/testify/mock"
)

// NewMockIUserService creates a new instance of MockIUserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIUserService {
	mock := &MockIUserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIUserService is an autogenerated mock type for the IUserService type
type MockIUserService struct {
	mock.Mock
}

type MockIUserService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIUserService) EXPECT() *MockIUserService_Expecter {
	return &MockIUserService_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockIUserService
func (_mock *MockIUserService) Create(user *model.CreateUserRequest, ctx *context.Context) (*model.UserResponse, error) {
	ret := _mock.Called(user, ctx)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *model.UserResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*model.CreateUserRequest, *context.Context) (*model.UserResponse, error)); ok {
		return returnFunc(user, ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(*model.CreateUserRequest, *context.Context) *model.UserResponse); ok {
		r0 = returnFunc(user, ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UserResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*model.CreateUserRequest, *context.Context) error); ok {
		r1 = returnFunc(user, ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIUserService_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockIUserService_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - user
//   - ctx
func (_e *MockIUserService_Expecter) Create(user interface{}, ctx interface{}) *MockIUserService_Create_Call {
	return &MockIUserService_Create_Call{Call: _e.mock.On("Create", user, ctx)}
}

func (_c *MockIUserService_Create_Call) Run(run func(user *model.CreateUserRequest, ctx *context.Context)) *MockIUserService_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.CreateUserRequest), args[1].(*context.Context))
	})
	return _c
}

func (_c *MockIUserService_Create_Call) Return(userResponse *model.UserResponse, err error) *MockIUserService_Create_Call {
	_c.Call.Return(userResponse, err)
	return _c
}

func (_c *MockIUserService_Create_Call) RunAndReturn(run func(user *model.CreateUserRequest, ctx *context.Context) (*model.UserResponse, error)) *MockIUserService_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockIUserService
func (_mock *MockIUserService) Delete(id int, ctx *context.Context) (*model.UserResponse, error) {
	ret := _mock.Called(id, ctx)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 *model.UserResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int, *context.Context) (*model.UserResponse, error)); ok {
		return returnFunc(id, ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(int, *context.Context) *model.UserResponse); ok {
		r0 = returnFunc(id, ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UserResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(int, *context.Context) error); ok {
		r1 = returnFunc(id, ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIUserService_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockIUserService_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - id
//   - ctx
func (_e *MockIUserService_Expecter) Delete(id interface{}, ctx interface{}) *MockIUserService_Delete_Call {
	return &MockIUserService_Delete_Call{Call: _e.mock.On("Delete", id, ctx)}
}

func (_c *MockIUserService_Delete_Call) Run(run func(id int, ctx *context.Context)) *MockIUserService_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(*context.Context))
	})
	return _c
}

func (_c *MockIUserService_Delete_Call) Return(userResponse *model.UserResponse, err error) *MockIUserService_Delete_Call {
	_c.Call.Return(userResponse, err)
	return _c
}

func (_c *MockIUserService_Delete_Call) RunAndReturn(run func(id int, ctx *context.Context) (*model.UserResponse, error)) *MockIUserService_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetById provides a mock function for the type MockIUserService
func (_mock *MockIUserService) GetById(id int, ctx *context.Context) (*model.UserResponse, error) {
	ret := _mock.Called(id, ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 *model.UserResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int, *context.Context) (*model.UserResponse, error)); ok {
		return returnFunc(id, ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(int, *context.Context) *model.UserResponse); ok {
		r0 = returnFunc(id, ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UserResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(int, *context.Context) error); ok {
		r1 = returnFunc(id, ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIUserService_GetById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetById'
type MockIUserService_GetById_Call struct {
	*mock.Call
}

// GetById is a helper method to define mock.On call
//   - id
//   - ctx
func (_e *MockIUserService_Expecter) GetById(id interface{}, ctx interface{}) *MockIUserService_GetById_Call {
	return &MockIUserService_GetById_Call{Call: _e.mock.On("GetById", id, ctx)}
}

func (_c *MockIUserService_GetById_Call) Run(run func(id int, ctx *context.Context)) *MockIUserService_GetById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(*context.Context))
	})
	return _c
}

func (_c *MockIUserService_GetById_Call) Return(userResponse *model.UserResponse, err error) *MockIUserService_GetById_Call {
	_c.Call.Return(userResponse, err)
	return _c
}

func (_c *MockIUserService_GetById_Call) RunAndReturn(run func(id int, ctx *context.Context) (*model.UserResponse, error)) *MockIUserService_GetById_Call {
	_c.Call.Return(run)
	return _c
}

// GetUsers provides a mock function for the type MockIUserService
func (_mock *MockIUserService) GetUsers(offset int, limit int, ctx *context.Context) ([]*model.UserResponse, error) {
	ret := _mock.Called(offset, limit, ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetUsers")
	}

	var r0 []*model.UserResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int, int, *context.Context) ([]*model.UserResponse, error)); ok {
		return returnFunc(offset, limit, ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(int, int, *context.Context) []*model.UserResponse); ok {
		r0 = returnFunc(offset, limit, ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.UserResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(int, int, *context.Context) error); ok {
		r1 = returnFunc(offset, limit, ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIUserService_GetUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsers'
type MockIUserService_GetUsers_Call struct {
	*mock.Call
}

// GetUsers is a helper method to define mock.On call
//   - offset
//   - limit
//   - ctx
func (_e *MockIUserService_Expecter) GetUsers(offset interface{}, limit interface{}, ctx interface{}) *MockIUserService_GetUsers_Call {
	return &MockIUserService_GetUsers_Call{Call: _e.mock.On("GetUsers", offset, limit, ctx)}
}

func (_c *MockIUserService_GetUsers_Call) Run(run func(offset int, limit int, ctx *context.Context)) *MockIUserService_GetUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int), args[2].(*context.Context))
	})
	return _c
}

func (_c *MockIUserService_GetUsers_Call) Return(userResponses []*model.UserResponse, err error) *MockIUserService_GetUsers_Call {
	_c.Call.Return(userResponses, err)
	return _c
}

func (_c *MockIUserService_GetUsers_Call) RunAndReturn(run func(offset int, limit int, ctx *context.Context) ([]*model.UserResponse, error)) *MockIUserService_GetUsers_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockIUserService
func (_mock *MockIUserService) Update(user *model.UpdateUserRequest, ctx *context.Context) (*model.UserResponse, error) {
	ret := _mock.Called(user, ctx)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *model.UserResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*model.UpdateUserRequest, *context.Context) (*model.UserResponse, error)); ok {
		return returnFunc(user, ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(*model.UpdateUserRequest, *context.Context) *model.UserResponse); ok {
		r0 = returnFunc(user, ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UserResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*model.UpdateUserRequest, *context.Context) error); ok {
		r1 = returnFunc(user, ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIUserService_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockIUserService_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - user
//   - ctx
func (_e *MockIUserService_Expecter) Update(user interface{}, ctx interface{}) *MockIUserService_Update_Call {
	return &MockIUserService_Update_Call{Call: _e.mock.On("Update", user, ctx)}
}

func (_c *MockIUserService_Update_Call) Run(run func(user *model.UpdateUserRequest, ctx *context.Context)) *MockIUserService_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.UpdateUserRequest), args[1].(*context.Context))
	})
	return _c
}

func (_c *MockIUserService_Update_Call) Return(userResponse *model.UserResponse, err error) *MockIUserService_Update_Call {
	_c.Call.Return(userResponse, err)
	return _c
}

func (_c *MockIUserService_Update_Call) RunAndReturn(run func(user *model.UpdateUserRequest, ctx *context.Context) (*model.UserResponse, error)) *MockIUserService_Update_Call {
	_c.Call.Return(run)
	return _c
}
